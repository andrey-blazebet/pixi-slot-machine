{"version":3,"sources":["webpack:///./config/index.ts","webpack:///./components/Button/assets/playbtn.png","webpack:///./components/Button/assets/playbtn_inactive.png","webpack:///./components/Button/index.ts","webpack:///./components/Reels/assets/reel_cells.png","webpack:///./components/Reels/index.ts","webpack:///./components/FPSDisplay/index.ts","webpack:///./index.ts"],"names":["config","x","y","Button","btnActiveTexture","from","btnInactiveTexture","isActive","onClick","btn","buttonMode","interactive","container","addChild","buttonInstance","getContainer","setActive","flag","texture","setOnclick","cb","on","load","loader","add","totalReels","reelRotationCycles","reelRotationSpeedFactor","reelTotalCells","reelCellHeight","reelVerticalPadding","reelHorizontalMargin","useEasyMode","reelWidth","reelHeight","getNumberBetween","min","max","Math","floor","random","Reels","width","height","reelCellsTexture","reels","reelsCyclesLength","reelPositions","Array","length","_","index","i","reel","tilePosition","push","rotateReels","positions","undefined","find","requestAnimationFrame","alert","rotate","easyMode","preDefinedPosition","position","getNewReelPositions","ceil","ticker","FPSDisplayText","fontSize","fill","setInterval","fps","FPS","toFixed","text","Date","now","gameWidth","gameHeight","reelsPosition","buttonPosition","FPSDisplayPosition","main","app","setup","backgroundColor","document","body","appendChild","view","renderer","resize","window","innerWidth","innerHeight","stage","scale","addEventListener","onResize","reelsContainer","set","button","instance","btnContainer","fpsDisplayContainer","onload","shared","onComplete","once"],"mappings":"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","file":"app.530908e68130740e68cb.js","sourcesContent":["import { ConfigInterface } from './contract';\n\nexport const config: ConfigInterface = {\n  gameWidth: 800,\n  gameHeight: 600,\n  reelsPosition: { x: 120, y: 60 },\n  buttonPosition: { x: 300, y: 440 },\n  FPSDisplayPosition: { x: 220, y: 560 },\n  totalReels: 5,\n  reelRotationCycles: 2,\n  reelRotationSpeedFactor: [5, 10, 15, 20, 30],\n  reelTotalCells: 7,\n  reelVisibleCells: 3,\n  reelCellHeight: 100,\n  reelCellWidth: 102,\n  reelVerticalPadding: 25,\n  reelHorizontalMargin: 15,\n  useEasyMode: true\n};\n","export default __webpack_public_path__ + \"assets/4b47a44dfec58e388f81716668f6b7f3.png\";","export default __webpack_public_path__ + \"assets/584548321fda602a2ac4f0965b5ab415.png\";","import * as PIXI from 'pixi.js';\nimport { ButtonFactoryInterface, ButtonInstanceInterface } from './contract';\n\nimport btnActiveImg from './assets/playbtn.png';\nimport btnInactiveImg from './assets/playbtn_inactive.png';\n\nconst Button: ButtonFactoryInterface = () => {\n  const btnActiveTexture = PIXI.Texture.from('btnActiveImg');\n  const btnInactiveTexture = PIXI.Texture.from('btnInactiveImg');\n  let isActive = true;\n  let onClick: Function = () => {};\n\n  const btn = new PIXI.Sprite(btnActiveTexture);\n  btn.buttonMode = true;\n  btn.interactive = true;\n\n  const container = new PIXI.Container();\n  container.addChild(btn);\n\n  const buttonInstance: ButtonInstanceInterface = {\n    getContainer(): PIXI.Container {\n      return container;\n    },\n\n    setActive(flag = true) {\n      isActive = flag;\n      btn.texture = isActive ? btnActiveTexture : btnInactiveTexture;\n    },\n\n    isActive() {\n      return isActive;\n    },\n\n    setOnclick(cb) {\n      onClick = cb;\n    }\n  };\n\n  btn.on('click', () => {\n    if (onClick) onClick(buttonInstance);\n  });\n\n  return buttonInstance;\n};\n\nButton.load = (loader) => {\n  loader.add('btnActiveImg', btnActiveImg);\n  loader.add('btnInactiveImg', btnInactiveImg);\n};\n\nexport default Button;\n","export default __webpack_public_path__ + \"assets/582cb73eb42daf0a295da68c5156de1d.png\";","import * as PIXI from 'pixi.js';\nimport { config } from '../../config';\nimport { ReelsFactoryInterface } from './contract';\n\nimport reelCellsImg from './assets/reel_cells.png';\n\nconst {\n  totalReels,\n  reelRotationCycles,\n  reelRotationSpeedFactor,\n  reelTotalCells,\n  reelCellHeight,\n  reelCellWidth,\n  reelVisibleCells,\n  reelVerticalPadding,\n  reelHorizontalMargin,\n  useEasyMode\n} = config;\nconst reelWidth = reelCellWidth;\nconst reelHeight = reelCellHeight * reelVisibleCells + reelVerticalPadding;\n\nconst Reel = (width: number, height: number): PIXI.TilingSprite => {\n  const reelCellsTexture = PIXI.Texture.from('reelCellsImg');\n  return new PIXI.TilingSprite(reelCellsTexture, width, height);\n};\n\nconst getNumberBetween = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getNewReelPositions = (easyMode = true): number[] => {\n  const positions = [];\n  let preDefinedPosition = null;\n  if (easyMode) {\n    const chance = getNumberBetween(0, 10);\n    if (chance < 5) {\n      preDefinedPosition = getNumberBetween(0, reelTotalCells - 1);\n    }\n  }\n  for (let i = 0; i < totalReels; i += 1) {\n    const position = preDefinedPosition || getNumberBetween(0, reelTotalCells - 1);\n    positions.push(position);\n  }\n  return positions;\n};\n\nconst checkResults = (positions: number[]): void => {\n  const win = positions.find((i) => i !== positions[0]) === undefined;\n  if (win) alert('You won!');\n};\n\nconst Reels: ReelsFactoryInterface = () => {\n  const container: PIXI.Container = new PIXI.Container();\n  const reels: PIXI.TilingSprite[] = [];\n  const reelsCyclesLength: number[] = [];\n  let reelPositions: number[] = Array.from({ length: totalReels }, (_, index) => index);\n\n  for (let i = 0; i < totalReels; i = i + 1) {\n    const reel = Reel(reelWidth, reelHeight);\n    reel.tilePosition.x = 0;\n    reel.tilePosition.y = -reelPositions[i] * reelCellHeight + Math.floor(reelVerticalPadding / 2);\n    reel.x = i * (reelWidth + reelHorizontalMargin);\n    reel.y = 0;\n    reels.push(reel);\n    container.addChild(reel);\n  }\n\n  function rotateReels(cb: Function): void {\n    for (let i = 0; i < totalReels; i++) {\n      if (reelsCyclesLength[i] > 0) {\n        reels[i].tilePosition.y += reelRotationSpeedFactor[i];\n        reelsCyclesLength[i] -= reelRotationSpeedFactor[i];\n      } else if (reelsCyclesLength[i] < 0) {\n        reels[i].tilePosition.y += reelsCyclesLength[i];\n        reelsCyclesLength[i] = 0;\n      }\n    }\n    const done = reelsCyclesLength.find((i) => i > 0);\n    if (done !== undefined) requestAnimationFrame(() => rotateReels(cb));\n    else {\n      cb();\n      checkResults(reelPositions);\n    }\n  }\n\n  return {\n    getContainer() {\n      return container;\n    },\n\n    rotate(cb) {\n      reelPositions = getNewReelPositions(useEasyMode);\n      for (let i = 0; i < totalReels; i += 1) {\n        reels[i].tilePosition.y = -reelPositions[i] * reelCellHeight + Math.ceil(reelVerticalPadding / 2);\n        reelsCyclesLength[i] = reelRotationCycles * reelCellHeight * reelTotalCells;\n      }\n      rotateReels(cb);\n    }\n  };\n};\n\nReels.load = (loader) => {\n  loader.add('reelCellsImg', reelCellsImg);\n};\n\nexport default Reels;\n","import * as PIXI from 'pixi.js';\nimport { FPSDisplayType } from './contract';\n\nconst FPSDisplay: FPSDisplayType = (ticker) => {\n  const container = new PIXI.Container();\n  const FPSDisplayText = new PIXI.Text('', {\n    fontSize: 20,\n    fill: 0xff0000\n  });\n  container.addChild(FPSDisplayText);\n\n  setInterval(() => {\n    const fps = ticker.FPS.toFixed(2);\n    FPSDisplayText.text = `Timestamp: ${Date.now()}, FPS: ${fps}`;\n  }, 1000);\n\n  return container;\n};\n\nexport default FPSDisplay;\n","/**\n * Just for simplicity and demonstration purposes, no specific JavaScript framework or state management library has\n * been used.\n */\n\nimport * as PIXI from 'pixi.js';\nimport { config } from './config';\nimport Button from './components/Button';\nimport Reels from './components/Reels';\nimport FPSDisplay from './components/FPSDisplay';\n\nimport './style.css';\n\nconst { gameWidth, gameHeight, reelsPosition, buttonPosition, FPSDisplayPosition } = config;\n\nexport default function main() {\n  let app: PIXI.Application;\n\n  function loadAssets(): void {\n    const loader = PIXI.Loader.shared;\n    Button.load(loader);\n    Reels.load(loader);\n    loader.onComplete.once(setup);\n    loader.load();\n  }\n\n  function setup(): void {\n    createRenderer();\n    const stage = app.stage;\n\n    const { rotate, getContainer } = Reels();\n    const reelsContainer = getContainer();\n    reelsContainer.position.set(reelsPosition.x, reelsPosition.y);\n    stage.addChild(reelsContainer);\n\n    const button = Button();\n    button.setOnclick((instance) => {\n      if (instance.isActive()) {\n        instance.setActive(false);\n        rotate(() => {\n          instance.setActive(true);\n        });\n      }\n    });\n    const btnContainer = button.getContainer();\n    btnContainer.position.set(buttonPosition.x, buttonPosition.y);\n    stage.addChild(btnContainer);\n\n    const fpsDisplayContainer = FPSDisplay(app.ticker);\n    fpsDisplayContainer.position.set(FPSDisplayPosition.x, FPSDisplayPosition.y);\n    stage.addChild(fpsDisplayContainer);\n  }\n\n  function createRenderer(): void {\n    app = new PIXI.Application({\n      backgroundColor: 0xd3d3d3,\n      width: gameWidth,\n      height: gameHeight\n    });\n\n    document.body.appendChild(app.view);\n\n    app.renderer.resize(window.innerWidth, window.innerHeight);\n    app.stage.scale.x = window.innerWidth / gameWidth;\n    app.stage.scale.y = window.innerHeight / gameHeight;\n\n    window.addEventListener('resize', onResize);\n  }\n\n  function onResize(): void {\n    if (!app) {\n      return;\n    }\n    app.renderer.resize(window.innerWidth, window.innerHeight);\n    app.stage.scale.x = window.innerWidth / gameWidth;\n    app.stage.scale.y = window.innerHeight / gameHeight;\n  }\n\n  window.onload = (): void => {\n    loadAssets();\n  };\n}\n\nmain();\n"],"sourceRoot":""}