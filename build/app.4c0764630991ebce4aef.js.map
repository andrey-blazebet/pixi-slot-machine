{"version":3,"sources":["webpack:///./Reels.ts","webpack:///./assets/playbtn.png","webpack:///./assets/playbtn_inactive.png","webpack:///./assets/reel_cells.png","webpack:///./index.ts","webpack:///./Button.ts","webpack:///./FPSCounter.ts"],"names":["reelsPosition","reelSpeedFactor","Reels","width","height","texture","reels","reelsCyclesLength","reelPositions","container","position","set","i","reel","reelCellHeight","from","tilePosition","x","y","push","addChild","getNumberBetween","min","max","Math","floor","random","rotateReels","cb","undefined","find","requestAnimationFrame","alert","getContainer","rotate","easyLevel","positions","preDefinedPosition","reelCellNumber","getReelPositions","reelRotationCycles","main","app","setup","backgroundColor","document","body","appendChild","view","renderer","resize","window","innerWidth","innerHeight","stage","scale","addEventListener","onResize","button","onClickActive","activeBTN","inactiveBTN","isActive","buttonMode","interactive","on","Button","ticker","fpsPanel","fontSize","fill","setInterval","fps","FPS","toFixed","text","Date","now","FPSCounter","onload","loader","shared","add","onComplete","once","load"],"mappings":"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","file":"app.4c0764630991ebce4aef.js","sourcesContent":["import * as PIXI from 'pixi.js';\n\nconst reelsNumber = 5;\nconst reelsPosition = { x: 120, y: 60 };\nconst reelCellWidth = 102;\nconst reelCellHeight = 100;\nconst reelWidth = reelCellWidth;\nconst reelHeight = reelCellHeight * 3 + 20;\nconst reelCellNumber = 7;\nconst reelSpeedFactor = [5, 10, 15, 20, 30];\nconst reelRotationCycles = 2;\n\nconst Reel = (width: number, height: number): PIXI.TilingSprite => {\n  const texture = PIXI.Texture.from('reel_cells');\n  return new PIXI.TilingSprite(texture, width, height);\n};\n\nexport default function Reels() {\n  const reels: PIXI.TilingSprite[] = [];\n  const reelsCyclesLength: number[] = [];\n  let reelPositions = [0, 1, 2, 3, 4];\n\n  const container = new PIXI.Container();\n  container.position.set(reelsPosition.x, reelsPosition.y);\n\n  for (let i = 0; i < reelsNumber; i = i + 1) {\n    const reel = Reel(reelWidth, reelHeight);\n    reel.tilePosition.x = 0;\n    reel.tilePosition.y = -reelPositions[i] * reelCellHeight + 10;\n    reel.x = i * (reelWidth + 10);\n    reel.y = 0;\n    reels.push(reel);\n    container.addChild(reel);\n  }\n\n  function getNumberBetween(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function getReelPositions(easyLevel = true) {\n    const positions = [];\n    let preDefinedPosition = null;\n    if (easyLevel) {\n      const chance = getNumberBetween(0, 10);\n      if (chance < 5) {\n        preDefinedPosition = getNumberBetween(0, reelCellNumber - 1);\n      }\n    }\n    for (let i = 0; i < reelsNumber; i += 1) {\n      const position = preDefinedPosition || getNumberBetween(0, reelCellNumber - 1);\n      positions.push(position);\n    }\n    return positions;\n  }\n\n  function checkResults() {\n    const win = reelPositions.find((i) => i !== reelPositions[0]) === undefined;\n    if (win) alert('You won!');\n  }\n\n  function rotateReels(cb: Function) {\n    for (let i = 0; i < reelsNumber; i++) {\n      if (reelsCyclesLength[i] > 0) {\n        reels[i].tilePosition.y += reelSpeedFactor[i];\n        reelsCyclesLength[i] -= reelSpeedFactor[i];\n      } else if (reelsCyclesLength[i] < 0) {\n        reels[i].tilePosition.y += reelsCyclesLength[i];\n        reelsCyclesLength[i] = 0;\n      }\n    }\n    const done = reelsCyclesLength.find((i) => i > 0);\n    if (done !== undefined) requestAnimationFrame(() => rotateReels(cb));\n    else {\n      cb();\n      checkResults();\n    }\n  }\n\n  return {\n    getContainer() {\n      return container;\n    },\n\n    rotate(cb: Function) {\n      reelPositions = getReelPositions();\n      for (let i = 0; i < reelsNumber; i += 1) {\n        reels[i].tilePosition.y = -reelPositions[i] * reelCellHeight + 10;\n        reelsCyclesLength[i] = reelRotationCycles * reelCellHeight * reelCellNumber;\n      }\n      rotateReels(cb);\n    }\n  };\n}\n","export default __webpack_public_path__ + \"assets/4b47a44dfec58e388f81716668f6b7f3.png\";","export default __webpack_public_path__ + \"assets/584548321fda602a2ac4f0965b5ab415.png\";","export default __webpack_public_path__ + \"assets/582cb73eb42daf0a295da68c5156de1d.png\";","/**\n * Just for simplicity and demonstration purposes, no specific JavaScript framework or state management library has\n * been used.\n */\n\nimport * as PIXI from 'pixi.js';\n\nimport Reels from './Reels';\nimport Button from './Button';\nimport FPSCounter from './FPSCounter';\n\nimport './style.css';\nimport btnPlayAsset from './assets/playbtn.png';\nimport btnPlayInactiveAsset from './assets/playbtn_inactive.png';\nimport reelCeelsAsset from './assets/reel_cells.png';\n\nexport default function main() {\n  const gameWidth = 800;\n  const gameHeight = 600;\n  let app: PIXI.Application;\n\n  function loadAssets(): void {\n    const loader = PIXI.Loader.shared;\n    loader.add('playbtn', btnPlayAsset);\n    loader.add('playbtn_inactive', btnPlayInactiveAsset);\n    loader.add('reel_cells', reelCeelsAsset);\n    loader.onComplete.once(setup);\n    loader.load();\n  }\n\n  function setup(): void {\n    createRenderer();\n\n    const stage = app.stage;\n\n    const reels = Reels();\n    stage.addChild(reels.getContainer());\n\n    const button = Button((cb: Function) => reels.rotate(cb));\n    stage.addChild(button);\n\n    const container = FPSCounter(app.ticker);\n    stage.addChild(container);\n  }\n\n  function createRenderer(): void {\n    app = new PIXI.Application({\n      backgroundColor: 0xd3d3d3,\n      width: gameWidth,\n      height: gameHeight\n    });\n\n    document.body.appendChild(app.view);\n\n    app.renderer.resize(window.innerWidth, window.innerHeight);\n    app.stage.scale.x = window.innerWidth / gameWidth;\n    app.stage.scale.y = window.innerHeight / gameHeight;\n\n    window.addEventListener('resize', onResize);\n  }\n\n  function onResize(): void {\n    if (!app) {\n      return;\n    }\n    app.renderer.resize(window.innerWidth, window.innerHeight);\n    app.stage.scale.x = window.innerWidth / gameWidth;\n    app.stage.scale.y = window.innerHeight / gameHeight;\n  }\n\n  window.onload = (): void => {\n    loadAssets();\n  };\n}\n\nmain();\n","import * as PIXI from 'pixi.js';\n\nexport default function Button(onClickActive: Function) {\n  const activeBTN = PIXI.Texture.from('playbtn');\n  const inactiveBTN = PIXI.Texture.from('playbtn_inactive');\n  let isActive = true;\n\n  const button = new PIXI.Sprite(activeBTN);\n  button.buttonMode = true;\n  button.interactive = true;\n\n  button.on('click', () => {\n    if (isActive) {\n      isActive = false;\n      button.texture = inactiveBTN;\n      onClickActive(() => {\n        isActive = true;\n        button.texture = activeBTN;\n      });\n    }\n  });\n\n  const container = new PIXI.Container();\n  container.position.set(300, 440);\n  container.addChild(button);\n\n  return container;\n}\n","import * as PIXI from 'pixi.js';\n\nexport default function FPSCounter(ticker: PIXI.Ticker) {\n  const container = new PIXI.Container();\n  container.position.set(220, 560);\n\n  const fpsPanel = new PIXI.Text('', {\n    fontSize: 20,\n    fill: 0xff0000\n  });\n\n  setInterval(() => {\n    const fps = ticker.FPS.toFixed(2);\n    fpsPanel.text = `Timestamp: ${Date.now()}, FPS: ${fps}`;\n  }, 1000);\n\n  container.addChild(fpsPanel);\n  return container;\n}\n"],"sourceRoot":""}